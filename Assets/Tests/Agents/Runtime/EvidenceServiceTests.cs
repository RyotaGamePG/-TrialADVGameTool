// Generated by agent: 2025-10-07
using System.Collections.Generic;
using Agents.Runtime.Core.Eventing;
using Agents.Runtime.Evidence;
using NUnit.Framework;
using UnityEngine;

namespace Agents.Tests.Runtime
{
    public sealed class EvidenceServiceTests
    {
        private EvidenceService _service;
        private EventBus _eventBus;
        private EvidenceLibrary _library;
        private readonly List<string> _discovered = new List<string>();

        [SetUp]
        public void SetUp()
        {
            _eventBus = new EventBus();
            _service = new EvidenceService(_eventBus);
            _library = ScriptableObject.CreateInstance<EvidenceLibrary>();

            InjectEntries(_library, new EvidenceItemBuilder().WithId("evidence-1").Build());

            _service.EvidenceDiscovered += OnEvidenceDiscovered;
            _service.Initialize(_library);
        }

        [TearDown]
        public void TearDown()
        {
            _service.EvidenceDiscovered -= OnEvidenceDiscovered;
            _eventBus.Dispose();
            Object.DestroyImmediate(_library);
            _discovered.Clear();
        }

        [Test]
        public void TryDiscoverEvidence_InvokesEvent_WhenSuccessful()
        {
            var result = _service.TryDiscoverEvidence("evidence-1");

            Assert.True(result);
            Assert.True(_service.HasEvidence("evidence-1"));
            Assert.AreEqual(1, _discovered.Count);
            Assert.AreEqual("evidence-1", _discovered[0]);
        }

        [Test]
        public void TryDiscoverEvidence_ReturnsFalse_WhenDuplicate()
        {
            _service.TryDiscoverEvidence("evidence-1");

            var result = _service.TryDiscoverEvidence("evidence-1");
            Assert.False(result);
        }

        private void OnEvidenceDiscovered(EvidenceItem item)
        {
            if (item != null)
            {
                _discovered.Add(item.EvidenceId);
            }
        }

        private static void InjectEntries(EvidenceLibrary library, params EvidenceItem[] items)
        {
            var field = typeof(EvidenceLibrary).GetField("_entries", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var list = (List<EvidenceItem>)field.GetValue(library);
            list.Clear();
            for (var i = 0; i < items.Length; i++)
            {
                list.Add(items[i]);
            }
        }

        private sealed class EvidenceItemBuilder
        {
            private string _id = "evidence";
            private string _name = "Evidence";
            private string _description = "Description";

            public EvidenceItemBuilder WithId(string id)
            {
                _id = id;
                return this;
            }

            public EvidenceItem Build()
            {
                var item = new EvidenceItem();
                typeof(EvidenceItem).GetField("_evidenceId", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)?.SetValue(item, _id);
                typeof(EvidenceItem).GetField("_displayName", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)?.SetValue(item, _name);
                typeof(EvidenceItem).GetField("_description", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)?.SetValue(item, _description);
                return item;
            }
        }
    }
}
