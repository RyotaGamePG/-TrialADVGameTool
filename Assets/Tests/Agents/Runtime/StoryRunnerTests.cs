// Generated by agent: 2025-10-07
using System.Collections.Generic;
using System.Reflection;
using Agents.Runtime.Core.Eventing;
using Agents.Runtime.Domain;
using Agents.Runtime.Evidence;
using Agents.Runtime.Story;
using NUnit.Framework;
using UnityEngine;

namespace Agents.Tests.Runtime
{
    public sealed class StoryRunnerTests
    {
        private GameObject _runnerObject;
        private StoryRunner _storyRunner;
        private EventBus _eventBus;
        private EvidenceService _evidenceService;
        private StoryGraph _graph;

        [SetUp]
        public void SetUp()
        {
            _runnerObject = new GameObject("StoryRunner");
            _storyRunner = _runnerObject.AddComponent<StoryRunner>();

            _eventBus = new EventBus();
            _evidenceService = new EvidenceService(_eventBus);

            _graph = ScriptableObject.CreateInstance<StoryGraph>();
            InjectStoryGraph(_storyRunner, _graph);

            _storyRunner.Initialize(_eventBus, _evidenceService);
            _storyRunner.SetFlag("HasContradiction", true);
        }

        [TearDown]
        public void TearDown()
        {
            Object.DestroyImmediate(_graph);
            Object.DestroyImmediate(_runnerObject);
            _eventBus.Dispose();
        }

        [Test]
        public void TryBranch_ReturnsNextNode_WhenConditionsMatch()
        {
            var startNode = CreateNode("start", ReactionType.None, "next");
            var nextNode = CreateNode("next", ReactionType.None, string.Empty);
            SetNodes(_graph, startNode, nextNode);

            _storyRunner.StartStory("start");

            Assert.True(_storyRunner.TryBranch(ReactionType.Contradiction, out var nextNodeId));
            Assert.AreEqual("next", nextNodeId);
        }

        [Test]
        public void TryBranch_Fails_WhenEvidenceMissing()
        {
            var transition = new StoryTransition();
            InjectTransition(transition, "next", new List<FlagRequirement>(), new List<EvidenceRequirement>
            {
                new EvidenceRequirement
                {
                    EvidenceId = "missing",
                    RequiredReaction = ReactionType.PresentEvidence
                }
            });

            var node = CreateNode("start", ReactionType.None, string.Empty, transition);
            SetNodes(_graph, node);

            _storyRunner.StartStory("start");
            Assert.False(_storyRunner.TryBranch(ReactionType.PresentEvidence, out _));
        }

        private static void InjectStoryGraph(StoryRunner runner, StoryGraph graph)
        {
            var field = typeof(StoryRunner).GetField("_storyGraph", BindingFlags.NonPublic | BindingFlags.Instance);
            field.SetValue(runner, graph);
        }

        private static void SetNodes(StoryGraph graph, params StoryNodeDefinition[] nodes)
        {
            var field = typeof(StoryGraph).GetField("_nodes", BindingFlags.NonPublic | BindingFlags.Instance);
            var list = (List<StoryNodeDefinition>)field.GetValue(graph);
            list.Clear();
            for (var i = 0; i < nodes.Length; i++)
            {
                list.Add(nodes[i]);
            }
        }

        private static StoryNodeDefinition CreateNode(string nodeId, ReactionType reactionType, string nextNodeId, params StoryTransition[] transitions)
        {
            var node = new StoryNodeDefinitionBuilder()
                .WithId(nodeId)
                .WithLine("speaker", "text", reactionType)
                .WithTransitions(transitions)
                .Build();

            if (transitions.Length == 0 && !string.IsNullOrEmpty(nextNodeId))
            {
                var transition = new StoryTransition();
                InjectTransition(transition, nextNodeId, new List<FlagRequirement>
                {
                    new FlagRequirement
                    {
                        FlagKey = "HasContradiction",
                        ExpectedValue = true
                    }
                }, new List<EvidenceRequirement>());

                node = new StoryNodeDefinitionBuilder()
                    .WithId(nodeId)
                    .WithLine("speaker", "text", reactionType)
                    .WithTransitions(transition)
                    .Build();
            }

            return node;
        }

        private static void InjectTransition(StoryTransition transition, string targetNodeId, List<FlagRequirement> flags, List<EvidenceRequirement> evidence)
        {
            var targetField = typeof(StoryTransition).GetField("_targetNodeId", BindingFlags.NonPublic | BindingFlags.Instance);
            var flagField = typeof(StoryTransition).GetField("_flagRequirements", BindingFlags.NonPublic | BindingFlags.Instance);
            var evidenceField = typeof(StoryTransition).GetField("_evidenceRequirements", BindingFlags.NonPublic | BindingFlags.Instance);

            targetField.SetValue(transition, targetNodeId);
            flagField.SetValue(transition, flags);
            evidenceField.SetValue(transition, evidence);
        }

        private sealed class StoryNodeDefinitionBuilder
        {
            private string _nodeId = "node";
            private string _title = "Node";
            private StoryNodeType _type = StoryNodeType.Dialogue;
            private readonly List<StoryLineDefinition> _lines = new List<StoryLineDefinition>();
            private readonly List<StoryTransition> _transitions = new List<StoryTransition>();

            public StoryNodeDefinitionBuilder WithId(string id)
            {
                _nodeId = id;
                return this;
            }

            public StoryNodeDefinitionBuilder WithLine(string speaker, string text, ReactionType reaction)
            {
                var line = new StoryLineDefinitionBuilder().WithSpeaker(speaker).WithText(text).WithReaction(reaction).Build();
                _lines.Add(line);
                return this;
            }

            public StoryNodeDefinitionBuilder WithTransitions(params StoryTransition[] transitions)
            {
                for (var i = 0; i < transitions.Length; i++)
                {
                    _transitions.Add(transitions[i]);
                }

                return this;
            }

            public StoryNodeDefinition Build()
            {
                var node = new StoryNodeDefinition();

                typeof(StoryNodeDefinition).GetField("_nodeId", BindingFlags.NonPublic | BindingFlags.Instance)?.SetValue(node, _nodeId);
                typeof(StoryNodeDefinition).GetField("_title", BindingFlags.NonPublic | BindingFlags.Instance)?.SetValue(node, _title);
                typeof(StoryNodeDefinition).GetField("_nodeType", BindingFlags.NonPublic | BindingFlags.Instance)?.SetValue(node, _type);
                typeof(StoryNodeDefinition).GetField("_lines", BindingFlags.NonPublic | BindingFlags.Instance)?.SetValue(node, _lines);
                typeof(StoryNodeDefinition).GetField("_transitions", BindingFlags.NonPublic | BindingFlags.Instance)?.SetValue(node, _transitions);

                return node;
            }
        }

        private sealed class StoryLineDefinitionBuilder
        {
            private string _speaker = string.Empty;
            private string _text = string.Empty;
            private ReactionType _reaction = ReactionType.None;

            public StoryLineDefinitionBuilder WithSpeaker(string speaker)
            {
                _speaker = speaker;
                return this;
            }

            public StoryLineDefinitionBuilder WithText(string text)
            {
                _text = text;
                return this;
            }

            public StoryLineDefinitionBuilder WithReaction(ReactionType reaction)
            {
                _reaction = reaction;
                return this;
            }

            public StoryLineDefinition Build()
            {
                var line = new StoryLineDefinition();
                typeof(StoryLineDefinition).GetField("_speakerId", BindingFlags.NonPublic | BindingFlags.Instance)?.SetValue(line, _speaker);
                typeof(StoryLineDefinition).GetField("_text", BindingFlags.NonPublic | BindingFlags.Instance)?.SetValue(line, _text);
                typeof(StoryLineDefinition).GetField("_reactionType", BindingFlags.NonPublic | BindingFlags.Instance)?.SetValue(line, _reaction);
                return line;
            }
        }
    }
}
