// Generated by agent: 2025-10-07
using System;
using System.Collections.Generic;
using Agents.Runtime.Core.Eventing;
using Agents.Runtime.Domain;
using Agents.Runtime.Evidence;
using UnityEngine;

namespace Agents.Runtime.Story
{
    /// <summary>
    /// Executes story nodes and publishes progression events for UI layers to consume.
    /// </summary>
    public sealed class StoryRunner : MonoBehaviour
    {
        [SerializeField]
        private StoryGraph _storyGraph;

        private readonly Dictionary<string, StoryNodeDefinition> _nodeLookup = new Dictionary<string, StoryNodeDefinition>(32);
        private readonly FlagState _flagState = new FlagState();
        private readonly List<StoryLineDefinition> _buffer = new List<StoryLineDefinition>(8);

        private IEventBus _eventBus;
        private IEvidenceService _evidenceService;
        private StoryNodeDefinition _currentNode;
        private int _currentLineIndex = -1;

        public void Initialize(IEventBus eventBus, IEvidenceService evidenceService)
        {
            _eventBus = eventBus ?? throw new ArgumentNullException(nameof(eventBus));
            _evidenceService = evidenceService ?? throw new ArgumentNullException(nameof(evidenceService));

            BuildNodeLookup();
        }

        public void StartStory(string nodeId)
        {
            if (string.IsNullOrEmpty(nodeId))
            {
                return;
            }

            if (!_nodeLookup.TryGetValue(nodeId, out var node))
            {
                Debug.LogError($"StoryRunner could not find node {nodeId}.");
                return;
            }

            _currentNode = node;
            _currentLineIndex = -1;
            _eventBus.Publish(new StoryNodeStartedEvent(_currentNode.NodeId));
        }

        public StoryLineDefinition GetNextLine()
        {
            if (_currentNode == null)
            {
                return null;
            }

            _buffer.Clear();
            foreach (var line in _currentNode.Lines)
            {
                _buffer.Add(line);
            }

            _currentLineIndex++;
            if (_currentLineIndex >= _buffer.Count)
            {
                _eventBus.Publish(new StoryNodeCompletedEvent(_currentNode.NodeId));
                return null;
            }

            var selectedLine = _buffer[_currentLineIndex];
            _eventBus.Publish(new StoryLineAdvancedEvent(_currentNode.NodeId, selectedLine.SpeakerId));
            return selectedLine;
        }

        public bool TryBranch(ReactionType reaction, out string nextNodeId)
        {
            nextNodeId = string.Empty;
            if (_currentNode == null)
            {
                return false;
            }

            var transitions = _currentNode.Transitions;
            var count = transitions.Count;
            for (var i = 0; i < count; i++)
            {
                var transition = transitions[i];
                if (!TransitionMatches(transition, reaction))
                {
                    continue;
                }

                nextNodeId = transition.TargetNodeId;
                return true;
            }

            return false;
        }

        public void SetFlag(string key, bool value)
        {
            _flagState.SetFlag(key, value);
        }

        private void BuildNodeLookup()
        {
            _nodeLookup.Clear();
            if (_storyGraph == null)
            {
                Debug.LogError("StoryRunner missing StoryGraph reference.");
                return;
            }

            var nodes = _storyGraph.Nodes;
            var count = nodes.Count;
            for (var i = 0; i < count; i++)
            {
                var node = nodes[i];
                if (node != null && !_nodeLookup.ContainsKey(node.NodeId))
                {
                    _nodeLookup[node.NodeId] = node;
                }
            }
        }

        private bool TransitionMatches(StoryTransition transition, ReactionType reaction)
        {
            var flagReqs = transition.FlagRequirements;
            var flagCount = flagReqs.Count;
            for (var i = 0; i < flagCount; i++)
            {
                var requirement = flagReqs[i];
                if (_flagState.GetFlag(requirement.FlagKey) != requirement.ExpectedValue)
                {
                    return false;
                }
            }

            var evidenceReqs = transition.EvidenceRequirements;
            var evidenceCount = evidenceReqs.Count;
            for (var i = 0; i < evidenceCount; i++)
            {
                var requirement = evidenceReqs[i];
                if (requirement.RequiredReaction != ReactionType.None && requirement.RequiredReaction != reaction)
                {
                    return false;
                }

                if (!string.IsNullOrEmpty(requirement.EvidenceId) && !_evidenceService.HasEvidence(requirement.EvidenceId))
                {
                    return false;
                }
            }

            return true;
        }
    }

    public readonly struct StoryNodeStartedEvent
    {
        public readonly string NodeId;

        public StoryNodeStartedEvent(string nodeId)
        {
            NodeId = nodeId;
        }
    }

    public readonly struct StoryLineAdvancedEvent
    {
        public readonly string NodeId;
        public readonly string SpeakerId;

        public StoryLineAdvancedEvent(string nodeId, string speakerId)
        {
            NodeId = nodeId;
            SpeakerId = speakerId;
        }
    }

    public readonly struct StoryNodeCompletedEvent
    {
        public readonly string NodeId;

        public StoryNodeCompletedEvent(string nodeId)
        {
            NodeId = nodeId;
        }
    }
}
