// Generated by agent: 2025-10-07
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

namespace Agents.Runtime.Demo
{
    /// <summary>
    /// Minimal save slot browser that shows placeholder data with text-only UI.
    /// </summary>
    public sealed class SaveSlotMenuController : MonoBehaviour
    {
        [SerializeField]
        private int slotCount = 3;

        private Canvas _canvas;
        private Text _headerText;
        private Text _detailsText;
        private RectTransform _slotRoot;
        private readonly List<Button> _slotButtons = new List<Button>(8);
        private Font _defaultFont;

        private void Start()
        {
            EnsureUi();
            BuildSlots();
        }

        private void OnDestroy()
        {
            for (var i = 0; i < _slotButtons.Count; i++)
            {
                if (_slotButtons[i] != null)
                {
                    _slotButtons[i].onClick.RemoveAllListeners();
                }
            }
        }

        private void EnsureUi()
        {
            if (_canvas != null)
            {
                return;
            }

            var canvasGo = new GameObject("SaveSlotCanvas");
            _canvas = canvasGo.AddComponent<Canvas>();
            _canvas.renderMode = RenderMode.ScreenSpaceOverlay;

            var scaler = canvasGo.AddComponent<CanvasScaler>();
            scaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
            scaler.referenceResolution = new Vector2(1600f, 900f);
            scaler.matchWidthOrHeight = 0.5f;

            canvasGo.AddComponent<GraphicRaycaster>();

            _headerText = CreateText(canvasGo.transform, "Header", new Vector2(0.5f, 1f), new Vector2(0.5f, 1f), new Vector2(0f, -80f), new Vector2(800f, 80f), 40, TextAnchor.UpperCenter);
            _headerText.text = "Save Slot Overview";

            _detailsText = CreateText(canvasGo.transform, "Details", new Vector2(0.75f, 0.5f), new Vector2(0.75f, 0.5f), new Vector2(0f, 0f), new Vector2(520f, 420f), 24, TextAnchor.UpperLeft);
            _detailsText.text = "Select a slot to view debug details.\n[Thumbnail Placeholder]\n[Timestamps Placeholder]";

            var slotPanel = new GameObject("SlotPanel");
            slotPanel.transform.SetParent(canvasGo.transform, false);
            var rect = slotPanel.AddComponent<RectTransform>();
            rect.anchorMin = new Vector2(0.25f, 0.5f);
            rect.anchorMax = new Vector2(0.25f, 0.5f);
            rect.pivot = new Vector2(0f, 0.5f);
            rect.anchoredPosition = new Vector2(-360f, 0f);
            rect.sizeDelta = new Vector2(420f, 540f);

            var image = slotPanel.AddComponent<Image>();
            image.color = new Color(0.1f, 0.1f, 0.1f, 0.65f);

            var layout = slotPanel.AddComponent<VerticalLayoutGroup>();
            layout.padding = new RectOffset(16, 16, 16, 16);
            layout.spacing = 12f;
            layout.childControlWidth = true;
            layout.childControlHeight = true;

            _slotRoot = rect;
        }

        private void BuildSlots()
        {
            if (_slotRoot == null)
            {
                return;
            }

            for (var i = 0; i < _slotButtons.Count; i++)
            {
                if (_slotButtons[i] == null)
                {
                    continue;
                }

#if UNITY_EDITOR
                DestroyImmediate(_slotButtons[i].gameObject);
#else
                Destroy(_slotButtons[i].gameObject);
#endif
            }

            _slotButtons.Clear();

            var count = Mathf.Max(1, slotCount);
            for (var index = 0; index < count; index++)
            {
                var slotNumber = index + 1;
                var button = CreateSlotButton(_slotRoot, $"SlotButton_{slotNumber}", $"Slot {slotNumber:00} - Empty");
                var capturedSlot = slotNumber;
                button.onClick.AddListener(() => ShowSlotDetails(capturedSlot));
                _slotButtons.Add(button);
            }
        }

        private void ShowSlotDetails(int slotNumber)
        {
            if (_detailsText == null)
            {
                return;
            }

            _detailsText.text =
                $"Slot {slotNumber:00}\nStatus: Empty (debug)\nLast Played: --/--/---- --:--\nScene Preview: [Text Placeholder]\nNote: Replace with actual save metadata.";
        }

        private Text CreateText(Transform parent, string name, Vector2 anchorMin, Vector2 anchorMax, Vector2 anchoredPosition, Vector2 sizeDelta, int fontSize, TextAnchor alignment)
        {
            var go = new GameObject(name);
            go.transform.SetParent(parent, false);

            var rect = go.AddComponent<RectTransform>();
            rect.anchorMin = anchorMin;
            rect.anchorMax = anchorMax;
            rect.anchoredPosition = anchoredPosition;
            rect.sizeDelta = sizeDelta;

            var text = go.AddComponent<Text>();
            text.font = ResolveDefaultFont();
            text.fontSize = fontSize;
            text.alignment = alignment;
            text.color = Color.white;
            text.horizontalOverflow = HorizontalWrapMode.Wrap;
            text.verticalOverflow = VerticalWrapMode.Overflow;

            return text;
        }

        private Button CreateSlotButton(Transform parent, string name, string label)
        {
            var go = new GameObject(name);
            go.transform.SetParent(parent, false);

            var rect = go.AddComponent<RectTransform>();
            rect.anchorMin = new Vector2(0f, 1f);
            rect.anchorMax = new Vector2(1f, 1f);
            rect.pivot = new Vector2(0.5f, 0.5f);
            rect.sizeDelta = new Vector2(0f, 72f);

            var image = go.AddComponent<Image>();
            image.color = new Color(0.18f, 0.18f, 0.18f, 0.8f);

            var button = go.AddComponent<Button>();
            var colors = button.colors;
            colors.normalColor = new Color(0.25f, 0.25f, 0.25f, 0.9f);
            colors.highlightedColor = new Color(0.4f, 0.4f, 0.4f, 0.9f);
            button.colors = colors;

            var text = CreateText(go.transform, "Label", new Vector2(0f, 0f), new Vector2(1f, 1f), Vector2.zero, Vector2.zero, 26, TextAnchor.MiddleLeft);
            text.text = label;
            text.supportRichText = true;

            return button;
        }

        private Font ResolveDefaultFont()
        {
            if (_defaultFont == null)
            {
                _defaultFont = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
            }

            return _defaultFont;
        }
    }
}
