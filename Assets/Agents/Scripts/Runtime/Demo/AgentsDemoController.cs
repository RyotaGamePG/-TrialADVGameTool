// Generated by agent: 2025-10-07
using System.Collections.Generic;
using Agents.Runtime.Bootstrap;
using Agents.Runtime.Config;
using Agents.Runtime.Core.Eventing;
using Agents.Runtime.Domain;
using Agents.Runtime.Evidence;
using Agents.Runtime.Story;
using Agents.Runtime.Trial;
using UnityEngine;
using UnityEngine.UI;

namespace Agents.Runtime.Demo
{
    /// <summary>
    /// Interactive demo driver that advances the story via UI clicks and exposes placeholder debug UI.
    /// </summary>
    public sealed class AgentsDemoController : MonoBehaviour
    {
        [SerializeField]
        private AgentsRuntimeInstaller runtimeInstaller;

        [SerializeField]
        private StoryRunner storyRunner;

        [SerializeField]
        private TrialController trialController;

        private Text _speakerText;
        private Text _bodyText;
        private Button _bodyButton;
        private Button _toggleEvidenceButton;
        private Text _toggleEvidenceLabel;
        private RectTransform _evidencePanel;
        private RectTransform _evidenceListRoot;
        private Text _evidenceDetailsText;

        private readonly List<Button> _evidenceButtons = new List<Button>(16);

        private IEventBus _eventBus;
        private IEvidenceService _evidenceService;
        private AgentsRuntimeConfig _runtimeConfig;
        private Font _defaultFont;

        private string _currentNodeId = string.Empty;
        private bool _awaitingTransition;
        private bool _demoCompleted;

        private void Start()
        {
            runtimeInstaller = runtimeInstaller == null ? GetComponent<AgentsRuntimeInstaller>() : runtimeInstaller;
            storyRunner = storyRunner == null ? FindObjectOfType<StoryRunner>() : storyRunner;
            trialController = trialController == null ? FindObjectOfType<TrialController>() : trialController;

            if (runtimeInstaller == null || storyRunner == null || trialController == null)
            {
                Debug.LogError("AgentsDemoController missing required references.");
                enabled = false;
                return;
            }

            _eventBus = runtimeInstaller.Resolve<IEventBus>();
            _evidenceService = runtimeInstaller.Resolve<IEvidenceService>();
            _runtimeConfig = runtimeInstaller.RuntimeConfig;

            _eventBus.Subscribe<StoryNodeStartedEvent>(OnNodeStarted);
            _eventBus.Subscribe<StoryNodeCompletedEvent>(OnNodeCompleted);

            EnsureUi();
            RefreshEvidencePanel();

            storyRunner.StartStory("intro");
        }

        private void OnDestroy()
        {
            if (_eventBus != null)
            {
                _eventBus.Unsubscribe<StoryNodeStartedEvent>(OnNodeStarted);
                _eventBus.Unsubscribe<StoryNodeCompletedEvent>(OnNodeCompleted);
            }

            for (var i = 0; i < _evidenceButtons.Count; i++)
            {
                if (_evidenceButtons[i] != null)
                {
                    _evidenceButtons[i].onClick.RemoveAllListeners();
                }
            }
        }

        private void EnsureUi()
        {
            if (_bodyButton != null && _speakerText != null)
            {
                return;
            }

            var canvasGo = new GameObject("AgentsDemoCanvas");
            var canvas = canvasGo.AddComponent<Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
            canvas.pixelPerfect = false;

            var scaler = canvasGo.AddComponent<CanvasScaler>();
            scaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
            scaler.referenceResolution = new Vector2(1920f, 1080f);
            scaler.matchWidthOrHeight = 0.5f;

            canvasGo.AddComponent<GraphicRaycaster>();

            _speakerText = CreateText(canvas.transform, "SpeakerText", new Vector2(0.5f, 1f), new Vector2(0.5f, 1f), new Vector2(0f, -80f), new Vector2(800f, 80f), 38, TextAnchor.UpperCenter);
            _speakerText.text = "Speaker";

            _bodyButton = CreateButton(canvas.transform, "BodyButton", new Vector2(0.5f, 0.5f), new Vector2(0.5f, 0.5f), Vector2.zero, new Vector2(1200f, 360f), "Click to advance");
            _bodyButton.onClick.AddListener(OnAdvanceRequested);
            _bodyText = _bodyButton.GetComponentInChildren<Text>();
            _bodyText.supportRichText = true;

            _toggleEvidenceButton = CreateButton(canvas.transform, "ToggleEvidenceButton", new Vector2(0f, 0f), new Vector2(0f, 0f), new Vector2(180f, 80f), new Vector2(280f, 80f), "Show Evidence");
            _toggleEvidenceLabel = _toggleEvidenceButton.GetComponentInChildren<Text>();
            _toggleEvidenceButton.onClick.AddListener(ToggleEvidencePanel);

            _evidencePanel = CreateEvidencePanel(canvas.transform);
            _evidencePanel.gameObject.SetActive(false);
        }

        private RectTransform CreateEvidencePanel(Transform parent)
        {
            var panelGo = new GameObject("EvidencePanel");
            panelGo.transform.SetParent(parent, false);

            var rect = panelGo.AddComponent<RectTransform>();
            rect.anchorMin = new Vector2(1f, 0.5f);
            rect.anchorMax = new Vector2(1f, 0.5f);
            rect.pivot = new Vector2(1f, 0.5f);
            rect.anchoredPosition = new Vector2(-40f, 0f);
            rect.sizeDelta = new Vector2(420f, 580f);

            var image = panelGo.AddComponent<Image>();
            image.color = new Color(0.08f, 0.08f, 0.08f, 0.75f);

            var layout = panelGo.AddComponent<VerticalLayoutGroup>();
            layout.padding = new RectOffset(16, 16, 16, 16);
            layout.spacing = 12f;
            layout.childAlignment = TextAnchor.UpperLeft;
            layout.childControlHeight = true;
            layout.childControlWidth = true;

            var header = CreatePanelText(panelGo.transform, "EvidenceHeader", 26, TextAnchor.MiddleCenter);
            header.text = "Evidence Viewer";
            var headerLayout = header.gameObject.AddComponent<LayoutElement>();
            headerLayout.preferredHeight = 54f;

            _evidenceDetailsText = CreatePanelText(panelGo.transform, "EvidenceDetails", 20, TextAnchor.UpperLeft);
            _evidenceDetailsText.text = "Select an entry to inspect details.\n[Image Placeholder: (none)]";
            var detailLayout = _evidenceDetailsText.gameObject.AddComponent<LayoutElement>();
            detailLayout.preferredHeight = 160f;
            detailLayout.flexibleHeight = 1f;

            var listRoot = new GameObject("EvidenceList");
            listRoot.transform.SetParent(panelGo.transform, false);
            _evidenceListRoot = listRoot.AddComponent<RectTransform>();
            var listLayout = listRoot.AddComponent<VerticalLayoutGroup>();
            listLayout.spacing = 8f;
            listLayout.childAlignment = TextAnchor.UpperLeft;
            listLayout.childControlHeight = true;
            listLayout.childControlWidth = true;

            var fitter = listRoot.AddComponent<ContentSizeFitter>();
            fitter.verticalFit = ContentSizeFitter.FitMode.PreferredSize;
            fitter.horizontalFit = ContentSizeFitter.FitMode.Unconstrained;

            return rect;
        }

        private void OnAdvanceRequested()
        {
            if (_demoCompleted)
            {
                UpdateBodyText("Demo finished. Adjust StoryGraph or EvidenceLibrary to extend the flow.");
                return;
            }

            if (_awaitingTransition)
            {
                UpdateBodyText($"[{_currentNodeId}] Transitioning… please wait.");
                return;
            }

            DisplayNextLine();
        }

        private void DisplayNextLine()
        {
            if (storyRunner == null)
            {
                return;
            }

            var line = storyRunner.GetNextLine();
            if (line == null)
            {
                _awaitingTransition = true;
                UpdateBodyText($"[{_currentNodeId}] Node complete. Pending next action…");
                return;
            }

            PresentLine(line);
        }

        private void PresentLine(StoryLineDefinition line)
        {
            if (line == null)
            {
                return;
            }

            if (_speakerText != null)
            {
                _speakerText.text = line.SpeakerId;
            }

            if (_bodyText != null)
            {
                var reactionSuffix = line.Reaction != ReactionType.None ? $"\n<size=18><color=#66CCFF>Action Cue: {line.Reaction}</color></size>" : string.Empty;
                var portraitPlaceholder = $"\n<size=18><color=#AAAAAA>[Portrait Placeholder: {line.SpeakerId}]</color></size>";
                _bodyText.text = $"{line.Text}{portraitPlaceholder}{reactionSuffix}";
            }

            Debug.Log($"[{line.SpeakerId}] {line.Text}");
        }

        private void OnNodeStarted(StoryNodeStartedEvent evt)
        {
            _currentNodeId = evt.NodeId;
            _awaitingTransition = false;
            UpdateBodyText($"[{evt.NodeId}] Tap the dialog area to progress.");
            RefreshEvidencePanel();
            DisplayNextLine();
        }

        private void OnNodeCompleted(StoryNodeCompletedEvent evt)
        {
            if (evt.NodeId != _currentNodeId)
            {
                return;
            }

            switch (evt.NodeId)
            {
                case "intro":
                    UpdateBodyText("Investigation unlocked. Preparing scene…");
                    trialController.SubmitReaction(ReactionType.None, string.Empty);
                    break;

                case "investigation":
                    _evidenceService.TryDiscoverEvidence("evidence-badge");
                    RefreshEvidencePanel();
                    UpdateBodyText("Evidence added: Agent Badge. Moving to trial…");
                    trialController.SubmitReaction(ReactionType.None, string.Empty);
                    break;

                case "trial":
                    UpdateBodyText("Presenting badge to the court…");
                    trialController.SubmitReaction(ReactionType.PresentEvidence, "evidence-badge");
                    break;

                case "ending-good":
                case "ending-bad":
                    _demoCompleted = true;
                    UpdateBodyText("Demo complete! Explore the tooling or tweak assets to iterate further.");
                    break;
            }
        }

        private void RefreshEvidencePanel()
        {
            if (_runtimeConfig == null || _runtimeConfig.EvidenceLibrary == null || _evidenceListRoot == null)
            {
                return;
            }

            for (var i = 0; i < _evidenceButtons.Count; i++)
            {
                if (_evidenceButtons[i] != null)
                {
                    var buttonGo = _evidenceButtons[i].gameObject;
#if UNITY_EDITOR
                    DestroyImmediate(buttonGo);
#else
                    Destroy(buttonGo);
#endif
                }
            }

            _evidenceButtons.Clear();

            var entries = _runtimeConfig.EvidenceLibrary.Entries;
            for (var i = 0; i < entries.Count; i++)
            {
                var item = entries[i];
                if (item == null)
                {
                    continue;
                }

                var hasItem = _evidenceService.HasEvidence(item.EvidenceId);
                var label = hasItem ? $"[Unlocked] {item.DisplayName}" : $"[Locked] {item.DisplayName}";
                var button = CreateListButton(_evidenceListRoot, $"EvidenceButton_{item.EvidenceId}", label);
                var capturedItem = item;
                button.onClick.AddListener(() => ShowEvidenceDetails(capturedItem, hasItem));
                _evidenceButtons.Add(button);
            }
        }

        private void ShowEvidenceDetails(EvidenceItem item, bool hasItem)
        {
            if (_evidenceDetailsText == null || item == null)
            {
                return;
            }

            var status = hasItem ? "OBTAINED" : "LOCKED";
            _evidenceDetailsText.text =
                $"{item.DisplayName} [{status}]\n{item.Description}\n[Image Placeholder: {item.DisplayName}]";
        }

        private void ToggleEvidencePanel()
        {
            if (_evidencePanel == null)
            {
                return;
            }

            var isActive = !_evidencePanel.gameObject.activeSelf;
            _evidencePanel.gameObject.SetActive(isActive);

            if (_toggleEvidenceLabel != null)
            {
                _toggleEvidenceLabel.text = isActive ? "Hide Evidence" : "Show Evidence";
            }
        }

        private void UpdateBodyText(string message)
        {
            if (_bodyText != null)
            {
                _bodyText.text = message;
            }
        }

        private Text CreateText(Transform parent, string name, Vector2 anchorMin, Vector2 anchorMax, Vector2 anchoredPosition, Vector2 sizeDelta, int fontSize, TextAnchor alignment)
        {
            var go = new GameObject(name);
            go.transform.SetParent(parent, false);

            var rect = go.AddComponent<RectTransform>();
            rect.anchorMin = anchorMin;
            rect.anchorMax = anchorMax;
            rect.anchoredPosition = anchoredPosition;
            rect.sizeDelta = sizeDelta;

            var text = go.AddComponent<Text>();
            text.font = ResolveDefaultFont();
            text.fontSize = fontSize;
            text.alignment = alignment;
            text.color = Color.white;
            text.horizontalOverflow = HorizontalWrapMode.Wrap;
            text.verticalOverflow = VerticalWrapMode.Truncate;

            return text;
        }

        private Button CreateButton(Transform parent, string name, Vector2 anchorMin, Vector2 anchorMax, Vector2 anchoredPosition, Vector2 sizeDelta, string label)
        {
            var go = new GameObject(name);
            go.transform.SetParent(parent, false);

            var rect = go.AddComponent<RectTransform>();
            rect.anchorMin = anchorMin;
            rect.anchorMax = anchorMax;
            rect.pivot = new Vector2(0.5f, 0.5f);
            rect.anchoredPosition = anchoredPosition;
            rect.sizeDelta = sizeDelta;

            var image = go.AddComponent<Image>();
            image.color = new Color(0.12f, 0.12f, 0.12f, 0.8f);

            var button = go.AddComponent<Button>();
            var colors = button.colors;
            colors.normalColor = new Color(0.2f, 0.2f, 0.2f, 0.9f);
            colors.highlightedColor = new Color(0.35f, 0.35f, 0.35f, 0.9f);
            colors.pressedColor = new Color(0.45f, 0.45f, 0.45f, 0.9f);
            button.colors = colors;

            var labelText = CreatePanelText(go.transform, "Label", 24, TextAnchor.MiddleCenter);
            labelText.text = label;

            return button;
        }

        private Text CreatePanelText(Transform parent, string name, int fontSize, TextAnchor alignment)
        {
            var go = new GameObject(name);
            go.transform.SetParent(parent, false);

            var rect = go.AddComponent<RectTransform>();
            rect.anchorMin = new Vector2(0f, 0f);
            rect.anchorMax = new Vector2(1f, 1f);
            rect.pivot = new Vector2(0.5f, 0.5f);
            rect.sizeDelta = Vector2.zero;

            var text = go.AddComponent<Text>();
            text.font = ResolveDefaultFont();
            text.fontSize = fontSize;
            text.alignment = alignment;
            text.color = Color.white;
            text.horizontalOverflow = HorizontalWrapMode.Wrap;
            text.verticalOverflow = VerticalWrapMode.Overflow;
            text.supportRichText = true;

            return text;
        }

        private Button CreateListButton(Transform parent, string name, string label)
        {
            var go = new GameObject(name);
            go.transform.SetParent(parent, false);

            var rect = go.AddComponent<RectTransform>();
            rect.anchorMin = new Vector2(0f, 1f);
            rect.anchorMax = new Vector2(1f, 1f);
            rect.pivot = new Vector2(0.5f, 0.5f);
            rect.sizeDelta = new Vector2(0f, 48f);

            var image = go.AddComponent<Image>();
            image.color = new Color(0.18f, 0.18f, 0.18f, 0.8f);

            var button = go.AddComponent<Button>();
            var colors = button.colors;
            colors.normalColor = new Color(0.25f, 0.25f, 0.25f, 0.9f);
            colors.highlightedColor = new Color(0.4f, 0.4f, 0.4f, 0.9f);
            button.colors = colors;

            var text = CreatePanelText(go.transform, "Label", 20, TextAnchor.MiddleLeft);
            text.text = label;

            return button;
        }

        private Font ResolveDefaultFont()
        {
            if (_defaultFont == null)
            {
                _defaultFont = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
            }

            return _defaultFont;
        }
    }
}
