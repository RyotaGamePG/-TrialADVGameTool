// Generated by agent: 2025-10-07
using System;
using Agents.Runtime.Core.Eventing;
using Agents.Runtime.Story;
using UnityEngine;

namespace Agents.Runtime.Portraits
{
    /// <summary>
    /// Handles portrait swapping and animation triggers in response to story events.
    /// </summary>
    public sealed class PortraitController : MonoBehaviour
    {
        [SerializeField]
        private Animator _portraitAnimator;

        [SerializeField]
        private string _idleStateName = "Idle";

        private IEventBus _eventBus;

        public void Initialize(IEventBus eventBus)
        {
            _eventBus = eventBus ?? throw new ArgumentNullException(nameof(eventBus));
            _eventBus.Subscribe<StoryLineAdvancedEvent>(OnStoryLineAdvanced);
        }

        private void OnDestroy()
        {
            if (_eventBus != null)
            {
                _eventBus.Unsubscribe<StoryLineAdvancedEvent>(OnStoryLineAdvanced);
            }
        }

        private void OnStoryLineAdvanced(StoryLineAdvancedEvent evt)
        {
            if (_portraitAnimator == null)
            {
                return;
            }

            if (string.IsNullOrEmpty(evt.SpeakerId))
            {
                _portraitAnimator.Play(_idleStateName);
            }
            else
            {
                _portraitAnimator.Play(evt.SpeakerId);
            }
        }
    }
}
