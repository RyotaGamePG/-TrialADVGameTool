// Generated by agent: 2025-10-07
using System;
using Agents.Runtime.Core.Eventing;
using Agents.Runtime.Domain;
using Agents.Runtime.Evidence;
using Agents.Runtime.Story;
using UnityEngine;

namespace Agents.Runtime.Trial
{
    /// <summary>
    /// Controls trial-specific logic such as reaction handling and branching outcomes.
    /// </summary>
    public sealed class TrialController : MonoBehaviour
    {
        [SerializeField]
        private string _startingNodeId = string.Empty;

        private StoryRunner _storyRunner;
        private IEvidenceService _evidenceService;
        private IEventBus _eventBus;

        public void Initialize(StoryRunner runner, IEvidenceService evidenceService, IEventBus eventBus)
        {
            _storyRunner = runner ?? throw new ArgumentNullException(nameof(runner));
            _evidenceService = evidenceService ?? throw new ArgumentNullException(nameof(evidenceService));
            _eventBus = eventBus ?? throw new ArgumentNullException(nameof(eventBus));

            if (!string.IsNullOrEmpty(_startingNodeId))
            {
                _storyRunner.StartStory(_startingNodeId);
            }
        }

        public void SubmitReaction(ReactionType reaction, string evidenceId)
        {
            if (!string.IsNullOrEmpty(evidenceId))
            {
                if (!_evidenceService.HasEvidence(evidenceId))
                {
                    Debug.LogWarning($"TrialController rejected evidence {evidenceId}: not acquired.");
                    return;
                }
            }

            if (_storyRunner.TryBranch(reaction, out var nextNodeId))
            {
                if (!string.IsNullOrEmpty(nextNodeId))
                {
                    _storyRunner.StartStory(nextNodeId);
                    _eventBus.Publish(new TrialReactionResolvedEvent(reaction, evidenceId, nextNodeId));
                }
            }
            else
            {
                _eventBus.Publish(new TrialReactionFailedEvent(reaction, evidenceId));
            }
        }
    }

    public readonly struct TrialReactionResolvedEvent
    {
        public readonly ReactionType Reaction;
        public readonly string EvidenceId;
        public readonly string NextNodeId;

        public TrialReactionResolvedEvent(ReactionType reaction, string evidenceId, string nextNodeId)
        {
            Reaction = reaction;
            EvidenceId = evidenceId;
            NextNodeId = nextNodeId;
        }
    }

    public readonly struct TrialReactionFailedEvent
    {
        public readonly ReactionType Reaction;
        public readonly string EvidenceId;

        public TrialReactionFailedEvent(ReactionType reaction, string evidenceId)
        {
            Reaction = reaction;
            EvidenceId = evidenceId;
        }
    }
}
