// Generated by agent: 2025-10-07
using System;
using Agents.Runtime.Config;
using Agents.Runtime.Core.Eventing;
using Agents.Runtime.Core.Services;
using Agents.Runtime.Evidence;
using Agents.Runtime.Story;
using Agents.Runtime.Trial;
using UnityEngine;

namespace Agents.Runtime.Bootstrap
{
    /// <summary>
    /// Sets up runtime services required by the Agents tool at scene load.
    /// </summary>
    public sealed class AgentsRuntimeInstaller : MonoBehaviour
    {
        [SerializeField]
        private AgentsRuntimeConfig _runtimeConfig;

        [SerializeField]
        private StoryRunner _storyRunner;

        [SerializeField]
        private TrialController _trialController;

        private ServiceLocator _serviceLocator;
        private EventBus _eventBus;
        private EvidenceService _evidenceService;

        public AgentsRuntimeConfig RuntimeConfig => _runtimeConfig;

        private void Awake()
        {
            if (_runtimeConfig == null)
            {
                Debug.LogError("AgentsRuntimeInstaller requires a runtime config asset.");
                enabled = false;
                return;
            }

            if (_storyRunner == null)
            {
                _storyRunner = FindObjectOfType<StoryRunner>();
            }

            if (_trialController == null)
            {
                _trialController = FindObjectOfType<TrialController>();
            }

            _serviceLocator = new ServiceLocator();
            _eventBus = new EventBus();

            _serviceLocator.Register<IEventBus>(_eventBus);

            _evidenceService = new EvidenceService(_eventBus);
            _serviceLocator.Register<IEvidenceService>(_evidenceService);

            _evidenceService.Initialize(_runtimeConfig.EvidenceLibrary);

            if (_storyRunner != null)
            {
                _storyRunner.Initialize(_eventBus, _evidenceService);
            }

            if (_trialController != null)
            {
                _trialController.Initialize(_storyRunner, _evidenceService, _eventBus);
            }
        }

        private void OnDestroy()
        {
            _eventBus?.Dispose();
            _serviceLocator?.Dispose();
        }

        public TService Resolve<TService>()
        {
            if (_serviceLocator == null)
            {
                throw new InvalidOperationException("AgentsRuntimeInstaller has not completed initialization.");
            }

            return _serviceLocator.Resolve<TService>();
        }
    }
}
