// Generated by agent: 2025-10-07
using System;
using System.Collections.Generic;
using Agents.Runtime.Core.Eventing;

namespace Agents.Runtime.Evidence
{
    public interface IEvidenceService
    {
        event Action<EvidenceItem> EvidenceDiscovered;

        void Initialize(EvidenceLibrary library);

        bool TryDiscoverEvidence(string evidenceId);

        bool HasEvidence(string evidenceId);

        EvidenceItem GetEvidence(string evidenceId);
    }

    /// <summary>
    /// Central manager for evidence acquisition and lookup.
    /// </summary>
    public sealed class EvidenceService : IEvidenceService
    {
        private readonly IEventBus _eventBus;
        private readonly Dictionary<string, EvidenceItem> _lookup = new Dictionary<string, EvidenceItem>(32);
        private readonly HashSet<string> _discovered = new HashSet<string>();
        private EvidenceLibrary _library;

        public EvidenceService(IEventBus eventBus)
        {
            _eventBus = eventBus ?? throw new ArgumentNullException(nameof(eventBus));
        }

        public event Action<EvidenceItem> EvidenceDiscovered;

        public void Initialize(EvidenceLibrary library)
        {
            _library = library;
            _lookup.Clear();
            _discovered.Clear();

            if (_library == null)
            {
                return;
            }

            var entries = _library.Entries;
            var count = entries.Count;
            for (var i = 0; i < count; i++)
            {
                var item = entries[i];
                if (item != null && !_lookup.ContainsKey(item.EvidenceId))
                {
                    _lookup[item.EvidenceId] = item;
                }
            }
        }

        public bool TryDiscoverEvidence(string evidenceId)
        {
            if (string.IsNullOrEmpty(evidenceId))
            {
                return false;
            }

            if (_discovered.Contains(evidenceId))
            {
                return false;
            }

            if (!_lookup.TryGetValue(evidenceId, out var item))
            {
                return false;
            }

            _discovered.Add(evidenceId);
            _eventBus.Publish(new EvidenceDiscoveredEvent(item.EvidenceId));

            EvidenceDiscovered?.Invoke(item);
            return true;
        }

        public bool HasEvidence(string evidenceId)
        {
            return _discovered.Contains(evidenceId);
        }

        public EvidenceItem GetEvidence(string evidenceId)
        {
            if (_lookup.TryGetValue(evidenceId, out var item))
            {
                return item;
            }

            return null;
        }
    }

    public readonly struct EvidenceDiscoveredEvent
    {
        public readonly string EvidenceId;

        public EvidenceDiscoveredEvent(string evidenceId)
        {
            EvidenceId = evidenceId;
        }
    }
}
