// Generated by agent: 2025-10-07
using System;
using System.Collections.Generic;

namespace Agents.Runtime.Core.Services
{
    /// <summary>
    /// Lightweight service locator used to provide DI semantics without allocations at runtime.
    /// </summary>
    public sealed class ServiceLocator : IServiceLocator, IDisposable
    {
        private readonly Dictionary<Type, object> _services = new Dictionary<Type, object>(16);
        private bool _disposed;

        public void Register<TService>(TService instance)
        {
            if (_disposed)
            {
                throw new ObjectDisposedException(nameof(ServiceLocator));
            }

            if (instance == null)
            {
                throw new ArgumentNullException(nameof(instance));
            }

            var key = typeof(TService);
            _services[key] = instance;
        }

        public TService Resolve<TService>()
        {
            if (TryResolve(out TService service))
            {
                return service;
            }

            throw new KeyNotFoundException($"Service of type {typeof(TService).Name} is not registered.");
        }

        public bool TryResolve<TService>(out TService service)
        {
            if (_disposed)
            {
                service = default;
                return false;
            }

            var key = typeof(TService);
            if (_services.TryGetValue(key, out var value) && value is TService typed)
            {
                service = typed;
                return true;
            }

            service = default;
            return false;
        }

        public void Dispose()
        {
            if (_disposed)
            {
                return;
            }

            foreach (var pair in _services)
            {
                if (pair.Value is IDisposable disposable)
                {
                    disposable.Dispose();
                }
            }

            _services.Clear();
            _disposed = true;
        }
    }
}
