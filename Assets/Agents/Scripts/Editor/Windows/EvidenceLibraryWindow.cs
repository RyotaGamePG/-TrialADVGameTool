// Generated by agent: 2025-10-07
using Agents.Editor.Utility;
using Agents.Runtime.Evidence;
using UnityEditor;
using UnityEngine;

namespace Agents.Editor.Windows
{
    public sealed class EvidenceLibraryWindow : EditorWindow
    {
        private EvidenceLibrary _library;
        private SerializedObject _serializedLibrary;
        private SerializedProperty _entriesProperty;
        private Vector2 _scroll;

        public static void Open(EvidenceLibrary library)
        {
            var window = GetWindow<EvidenceLibraryWindow>();
            window.titleContent = new GUIContent("Evidence Library");
            window._library = library ?? AgentsEditorAssetUtility.EnsureEvidenceLibrary();
            window.SetupSerializedObject();
            window.Show();
        }

        private void OnEnable()
        {
            if (_library == null)
            {
                _library = AgentsEditorAssetUtility.EnsureEvidenceLibrary();
            }

            SetupSerializedObject();
        }

        private void OnGUI()
        {
            if (_library == null)
            {
                EditorGUILayout.HelpBox("Evidence library asset is missing.", MessageType.Error);
                if (GUILayout.Button("Create Evidence Library Asset"))
                {
                    _library = AgentsEditorAssetUtility.EnsureEvidenceLibrary();
                    SetupSerializedObject();
                }

                return;
            }

            _serializedLibrary.Update();

            GUILayout.Label("Evidence Entries", EditorStyles.boldLabel);
            _scroll = EditorGUILayout.BeginScrollView(_scroll);

            var removeIndex = -1;
            var count = _entriesProperty != null ? _entriesProperty.arraySize : 0;
            for (var i = 0; i < count; i++)
            {
                var element = _entriesProperty.GetArrayElementAtIndex(i);
                using (new EditorGUILayout.VerticalScope(EditorStyles.helpBox))
                {
                    EditorGUILayout.PropertyField(element.FindPropertyRelative("_evidenceId"));
                    EditorGUILayout.PropertyField(element.FindPropertyRelative("_displayName"));
                    EditorGUILayout.PropertyField(element.FindPropertyRelative("_description"));
                    EditorGUILayout.PropertyField(element.FindPropertyRelative("_icon"));
                    EditorGUILayout.PropertyField(element.FindPropertyRelative("_voiceClip"));

                    if (GUILayout.Button("Remove"))
                    {
                        removeIndex = i;
                    }
                }
            }

            if (removeIndex >= 0)
            {
                _entriesProperty.DeleteArrayElementAtIndex(removeIndex);
            }

            EditorGUILayout.EndScrollView();

            if (GUILayout.Button("Add Evidence"))
            {
                _entriesProperty.InsertArrayElementAtIndex(_entriesProperty.arraySize);
            }

            _serializedLibrary.ApplyModifiedProperties();
        }

        private void SetupSerializedObject()
        {
            if (_library == null)
            {
                return;
            }

            _serializedLibrary = new SerializedObject(_library);
            _entriesProperty = _serializedLibrary.FindProperty("_entries");
        }
    }
}
