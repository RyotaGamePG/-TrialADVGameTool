// Generated by agent: 2025-10-07
using System.Collections.Generic;
using Agents.Editor.Utility;
using Agents.Runtime.Story;
using UnityEditor;
using UnityEngine;

namespace Agents.Editor.Windows
{
    public sealed class StoryGraphEditorWindow : EditorWindow
    {
        private StoryGraph _storyGraph;
        private SerializedObject _serializedGraph;
        private SerializedProperty _nodesProperty;

        private int _selectedIndex = -1;
        private Vector2 _nodeListScroll;
        private Vector2 _detailScroll;

        public static void Open(StoryGraph storyGraph)
        {
            var window = GetWindow<StoryGraphEditorWindow>();
            window.titleContent = new GUIContent("Story Graph");
            window._storyGraph = storyGraph ?? AgentsEditorAssetUtility.EnsureStoryGraph();
            window.SetupSerializedObject();
            window.Show();
        }

        private void OnEnable()
        {
            if (_storyGraph == null)
            {
                _storyGraph = AgentsEditorAssetUtility.EnsureStoryGraph();
            }

            SetupSerializedObject();
        }

        private void OnGUI()
        {
            if (_storyGraph == null)
            {
                EditorGUILayout.HelpBox("Story graph asset is missing.", MessageType.Error);
                if (GUILayout.Button("Create Story Graph Asset"))
                {
                    _storyGraph = AgentsEditorAssetUtility.EnsureStoryGraph();
                    SetupSerializedObject();
                }

                return;
            }

            _serializedGraph.Update();

            using (new EditorGUILayout.HorizontalScope())
            {
                DrawNodeList();
                DrawNodeDetails();
            }

            _serializedGraph.ApplyModifiedProperties();
        }

        private void DrawNodeList()
        {
            using (new EditorGUILayout.VerticalScope(GUILayout.Width(240f)))
            {
                GUILayout.Label("Story Nodes", EditorStyles.boldLabel);
                _nodeListScroll = EditorGUILayout.BeginScrollView(_nodeListScroll);

                var count = _nodesProperty.arraySize;
                for (var i = 0; i < count; i++)
                {
                    var element = _nodesProperty.GetArrayElementAtIndex(i);
                    var titleProperty = element.FindPropertyRelative("_title");
                    var nodeTitle = titleProperty != null ? titleProperty.stringValue : $"Node {i + 1}";

                    using (new EditorGUILayout.HorizontalScope(EditorStyles.helpBox))
                    {
                        if (GUILayout.Toggle(_selectedIndex == i, nodeTitle, "Button"))
                        {
                            _selectedIndex = i;
                        }

                        if (GUILayout.Button("X", GUILayout.Width(24f)))
                        {
                            if (EditorUtility.DisplayDialog("Remove Node", $"Remove node '{nodeTitle}'?", "Remove", "Cancel"))
                            {
                                _nodesProperty.DeleteArrayElementAtIndex(i);
                                _selectedIndex = Mathf.Clamp(_selectedIndex, 0, _nodesProperty.arraySize - 1);
                            }
                        }
                    }
                }

                EditorGUILayout.EndScrollView();

                if (GUILayout.Button("Add Node"))
                {
                    var index = _nodesProperty.arraySize;
                    _nodesProperty.InsertArrayElementAtIndex(index);
                    var newElement = _nodesProperty.GetArrayElementAtIndex(index);
                    var titleProperty = newElement.FindPropertyRelative("_title");
                    if (titleProperty != null)
                    {
                        titleProperty.stringValue = $"Node {index + 1}";
                    }
                    _selectedIndex = index;
                }
            }
        }

        private void DrawNodeDetails()
        {
            using (new EditorGUILayout.VerticalScope())
            {
                GUILayout.Label("Details", EditorStyles.boldLabel);

                if (_selectedIndex < 0 || _selectedIndex >= _nodesProperty.arraySize)
                {
                    EditorGUILayout.HelpBox("Select a node to edit its details.", MessageType.Info);
                    return;
                }

                var element = _nodesProperty.GetArrayElementAtIndex(_selectedIndex);

                _detailScroll = EditorGUILayout.BeginScrollView(_detailScroll);
                EditorGUILayout.PropertyField(element.FindPropertyRelative("_title"));
                EditorGUILayout.PropertyField(element.FindPropertyRelative("_nodeType"));

                GUILayout.Space(8f);
                GUILayout.Label("Lines", EditorStyles.boldLabel);
                var linesProperty = element.FindPropertyRelative("_lines");
                DrawReorderableList(linesProperty, DrawStoryLine);

                GUILayout.Space(8f);
                GUILayout.Label("Transitions", EditorStyles.boldLabel);
                var transitionsProperty = element.FindPropertyRelative("_transitions");
                DrawReorderableList(transitionsProperty, DrawTransition);

                EditorGUILayout.EndScrollView();
            }
        }

        private void DrawStoryLine(SerializedProperty item)
        {
            using (new EditorGUILayout.VerticalScope(EditorStyles.helpBox))
            {
                EditorGUILayout.PropertyField(item.FindPropertyRelative("_speakerId"));
                EditorGUILayout.PropertyField(item.FindPropertyRelative("_text"));
                EditorGUILayout.PropertyField(item.FindPropertyRelative("_voiceClip"));
                EditorGUILayout.PropertyField(item.FindPropertyRelative("_timeline"));
                EditorGUILayout.PropertyField(item.FindPropertyRelative("_reactionType"));
            }
        }

        private void DrawTransition(SerializedProperty item)
        {
            using (new EditorGUILayout.VerticalScope(EditorStyles.helpBox))
            {
                EditorGUILayout.PropertyField(item.FindPropertyRelative("_targetNodeId"));

                var flagRequirements = item.FindPropertyRelative("_flagRequirements");
                GUILayout.Label("Flag Requirements", EditorStyles.miniBoldLabel);
                DrawCollection(flagRequirements, DrawFlagRequirement);

                var evidenceRequirements = item.FindPropertyRelative("_evidenceRequirements");
                GUILayout.Label("Evidence Requirements", EditorStyles.miniBoldLabel);
                DrawCollection(evidenceRequirements, DrawEvidenceRequirement);
            }
        }

        private void DrawFlagRequirement(SerializedProperty item)
        {
            using (new EditorGUILayout.HorizontalScope())
            {
                EditorGUILayout.PropertyField(item.FindPropertyRelative("FlagKey"), GUIContent.none);
                EditorGUILayout.PropertyField(item.FindPropertyRelative("ExpectedValue"), GUIContent.none);
            }
        }

        private void DrawEvidenceRequirement(SerializedProperty item)
        {
            using (new EditorGUILayout.HorizontalScope())
            {
                EditorGUILayout.PropertyField(item.FindPropertyRelative("EvidenceId"), GUIContent.none);
                EditorGUILayout.PropertyField(item.FindPropertyRelative("RequiredReaction"), GUIContent.none);
            }
        }

        private void DrawReorderableList(SerializedProperty property, System.Action<SerializedProperty> drawer)
        {
            if (property == null)
            {
                return;
            }

            var count = property.arraySize;
            for (var i = 0; i < count; i++)
            {
                var element = property.GetArrayElementAtIndex(i);
                drawer(element);

                using (new EditorGUILayout.HorizontalScope())
                {
                    if (GUILayout.Button("Remove"))
                    {
                        property.DeleteArrayElementAtIndex(i);
                        break;
                    }

                    if (GUILayout.Button("Move Up") && i > 0)
                    {
                        property.MoveArrayElement(i, i - 1);
                    }

                    if (GUILayout.Button("Move Down") && i < count - 1)
                    {
                        property.MoveArrayElement(i, i + 1);
                    }
                }
            }

            if (GUILayout.Button($"Add {property.displayName}"))
            {
                property.InsertArrayElementAtIndex(property.arraySize);
            }
        }

        private void DrawCollection(SerializedProperty property, System.Action<SerializedProperty> drawer)
        {
            var removeIndex = -1;
            var count = property.arraySize;
            for (var i = 0; i < count; i++)
            {
                var element = property.GetArrayElementAtIndex(i);
                using (new EditorGUILayout.HorizontalScope(EditorStyles.helpBox))
                {
                    drawer(element);
                    if (GUILayout.Button("-", GUILayout.Width(24f)))
                    {
                        removeIndex = i;
                    }
                }
            }

            if (removeIndex >= 0)
            {
                property.DeleteArrayElementAtIndex(removeIndex);
            }

            if (GUILayout.Button("Add Entry"))
            {
                property.InsertArrayElementAtIndex(property.arraySize);
            }
        }

        private void SetupSerializedObject()
        {
            if (_storyGraph == null)
            {
                return;
            }

            _serializedGraph = new SerializedObject(_storyGraph);
            _nodesProperty = _serializedGraph.FindProperty("nodes");
            if (_nodesProperty != null && _nodesProperty.arraySize > 0)
            {
                _selectedIndex = Mathf.Clamp(_selectedIndex, 0, _nodesProperty.arraySize - 1);
            }
        }
    }
}
